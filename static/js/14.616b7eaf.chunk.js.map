{"version":3,"sources":["Data/LocalStorageComponent.ts","Data/LocalStorage.ts","version.ts","Solvers/WordSearchComponent.tsx","Views/Solvers/WordSearch.tsx"],"names":["LocalStorageComponent","props","VERSION_STORAGE_KEY","previousVersion","LocalStorage","getObject","versionIncreased","version","clear","setObject","this","restoreState","updateState","onUpdateState","saveState","prev","current","compareVersions","getLocalStorageKey","onSaveState","onRestoreState","Component","undefined","_isSupported","storage","window","localStorage","x","setItem","removeItem","e","DOMException","code","name","length","key","isSupported","getItem","getKey","objString","JSON","parse","value","object","stringify","_prefix","WordSearchComponent","_input","React","createRef","_gridInputText","_wordListInputText","_useCardinals","_useDiagonals","state","gridInputText","wordListInputText","useCardinals","useDiagonals","element","focus","className","fluid","noGutters","md","Header","Body","as","label","onChange","event","onListTextChanged","placeholder","renderEmptyDirection","checked","id","onDiagonalCheckboxChange","type","onCardinalCheckboxChange","onGridTextChanged","ref","spellCheck","borderless","renderOutput","savedState","setState","target","variant","trim","charArray","lines","split","wordsToFind","filter","word","wordSearchDirection","line","push","WordSearchDirection","CardinalAndDiagonal","Cardinal","Diagonal","None","solver","WordSearchSolver","setDirections","setGrid","setWords","results","findWords","shoudHighlight","highlightArray","result","y","row","reactKey","toString","inputGrid","shouldHighlight","hightlightLine","Array","from","v","i","points","point","WordSearch"],"mappings":"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","file":"static/js/14.616b7eaf.chunk.js","sourcesContent":["import compareVersions from 'compare-versions';\nimport { Component } from 'react';\nimport LocalStorage from './LocalStorage';\nimport { version } from '../version';\n\nabstract class LocalStorageComponent<P = {}, S = {}, SavedState = {}> extends Component<P, S> {\n  private readonly VERSION_STORAGE_KEY: string = 'puzztoolVersion';\n\n  public constructor(props: P) {\n    super(props);\n\n    // If the current localstorage was created with a prior version of puzztool, clear\n    // the local storage to get rid of any obsolete or incompatible artifacts\n    const previousVersion = LocalStorage.getObject<string>(this.VERSION_STORAGE_KEY);\n    if (this.versionIncreased(previousVersion, version)) {\n      LocalStorage.clear();\n      // Store the current version\n      LocalStorage.setObject<string>(this.VERSION_STORAGE_KEY, version);\n    }\n  }\n\n  public componentDidMount() {\n    this.restoreState();\n    this.updateState();\n  }\n\n  protected updateState() {\n    this.onUpdateState();\n    this.saveState();\n  }\n\n  protected abstract getLocalStorageKey(): string;\n  protected abstract onSaveState(): SavedState;\n  protected abstract onRestoreState(savedState: SavedState | null): void;\n  protected abstract onUpdateState(): void;\n\n  private versionIncreased(prev: string | null, current: string): boolean {\n    if (prev == null) {\n      // If there's no recorded version number, this is the user's first visit\n      // to the page since 0.7.0 released.  To clean up any potential legacy\n      // incompatabilities, clear storage and write the version.\n      return true;\n    }\n\n    return compareVersions(current, prev) === 1;\n  }\n\n  private saveState() {\n    LocalStorage.setObject<SavedState>(this.getLocalStorageKey(), this.onSaveState());\n  }\n\n  private restoreState() {\n    this.onRestoreState(LocalStorage.getObject<SavedState>(this.getLocalStorageKey()));\n  }\n}\n\nexport default LocalStorageComponent;\n","class LocalStorage {\n  private static _isSupported?: boolean;\n  private static _prefix: string = 'puzztool';\n\n  public static isSupported() {\n    if (this._isSupported === undefined) {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n\n      try {\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        this._isSupported = true;\n      } catch (e) {\n          this._isSupported = e instanceof DOMException && (\n            // everything except Firefox\n            e.code === 22 ||\n            // Firefox\n            e.code === 1014 ||\n            // test name field too, because code might not be present\n            // everything except Firefox\n            e.name === 'QuotaExceededError' ||\n            // Firefox\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n            // acknowledge QuotaExceededError only if there's something already stored\n            storage.length !== 0;\n      }\n    }\n\n    return this._isSupported;\n  }\n\n  public static getItem(key: string) {\n    if (this.isSupported()) {\n      return window.localStorage.getItem(this.getKey(key));\n    }\n\n    return null;\n  }\n\n  public static getObject<T>(key: string) {\n    if (this.isSupported()) {\n      const objString = window.localStorage.getItem(this.getKey(key));\n\n      if (objString !== null) {\n        return JSON.parse(objString) as T;\n      }\n    }\n\n    return null;\n  }\n\n  public static setItem(key: string, value: string) {\n    if (this.isSupported()) {\n      window.localStorage.setItem(this.getKey(key), value);\n    }\n  }\n\n  public static setObject<T>(key: string, object: T) {\n    if (this.isSupported()) {\n      window.localStorage.setItem(this.getKey(key), JSON.stringify(object));\n    }\n  }\n\n  public static clear() {\n    if (this.isSupported()) {\n      window.localStorage.clear();\n    }\n  }\n\n  private static getKey(key: string) {\n    return `${this._prefix}_${key}`;\n  }\n}\n\nexport default LocalStorage;\n","// generated by genversion\nexport const version = '0.7.0';\n","import React, { FormEvent } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport FormCheck from 'react-bootstrap/FormCheck';\r\nimport FormControl, { FormControlProps } from 'react-bootstrap/FormControl';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { WordSearchSolver, WordSearchResult, WordSearchDirection } from 'puzzle-lib';\r\nimport LocalStorageComponent from '../Data/LocalStorageComponent';\r\nimport './WordSearchComponent.scss';\r\n\r\ntype Props = {};\r\ntype State = {\r\n  gridInputText: string,\r\n  wordListInputText: string,\r\n  useDiagonals: boolean,\r\n  useCardinals: boolean,\r\n};\r\n\r\ntype SavedState = {\r\n  gridInputText: string,\r\n  wordListInputText: string,\r\n  useDiagonals: boolean,\r\n  useCardinals: boolean,\r\n};\r\n\r\nclass WordSearchComponent extends LocalStorageComponent<Props, State, SavedState> {\r\n  private readonly _input = React.createRef<FormControl<'textarea'> & HTMLTextAreaElement>();\r\n  private _gridInputText: string = '';\r\n  private _wordListInputText: string = '';\r\n  private _useCardinals: boolean = true;\r\n  private _useDiagonals: boolean = true;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      gridInputText: '',\r\n      wordListInputText: '',\r\n      useCardinals: true,\r\n      useDiagonals: true,\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    super.componentDidMount();\r\n\r\n    const element = this._input.current;\r\n    if (element) {\r\n      element.focus();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"WordSearchComponent\">\r\n        <Container fluid={true} >\r\n          <Row noGutters={true}>\r\n            <Col md={4}>\r\n              <Card className=\"WordSearchComponent-ListInput\">\r\n                <Card.Header>Enter the list of words to find, one word per line</Card.Header>\r\n                <Card.Body>\r\n                  <FormControl\r\n                    as=\"textarea\"\r\n                    className=\"WordSearchComponent-ListInput\"\r\n                    label=\"Enter the word search grid, one row of letters per line\"\r\n                    onChange={(event: FormEvent<FormControlProps>) => this.onListTextChanged(event)}\r\n                    placeholder=\"Word List To Find\"\r\n                    value={this.state.wordListInputText}\r\n                  />\r\n                  {this.renderEmptyDirection()}\r\n                  <FormCheck\r\n                    checked={this._useDiagonals}\r\n                    id=\"WordSearchComponent-checkbox-diagonal\"\r\n                    label=\"Use diagonal directions\"\r\n                    onChange={\r\n                      (event: FormEvent<HTMLInputElement>) => this.onDiagonalCheckboxChange(event)\r\n                    }\r\n                    type=\"checkbox\"\r\n                  />\r\n                  <FormCheck\r\n                    checked={this._useCardinals}\r\n                    id=\"WordSearchComponent-checkbox-cardinal\"\r\n                    label=\"Use cardinal directions\"\r\n                    onChange={\r\n                      (event: FormEvent<HTMLInputElement>) => this.onCardinalCheckboxChange(event)\r\n                    }\r\n                    type=\"checkbox\"\r\n                  />\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col md={8}>\r\n              <Card className=\"WordSearchComponent-GridInput\">\r\n                <Card.Header>Enter the word search grid, one row of letters per line</Card.Header>\r\n                <Card.Body>\r\n                  <FormControl\r\n                    as=\"textarea\"\r\n                    onChange={(event: FormEvent<FormControlProps>) => this.onGridTextChanged(event)}\r\n                    placeholder=\"Grid Text\"\r\n                    ref={this._input}\r\n                    spellCheck={false}\r\n                    value={this.state.gridInputText}\r\n                  />\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row noGutters={true}>\r\n            <Col md={12}>\r\n              <Card className=\"WordSearchComponent-GridOutput\">\r\n                <Card.Header>Output</Card.Header>\r\n                <Card.Body>\r\n                  <Table className=\"WordSearchComponent-TableOutput\" borderless={true}>\r\n                    <tbody>\r\n                      {this.renderOutput()}\r\n                    </tbody>\r\n                  </Table>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  protected getLocalStorageKey() {\r\n    return 'WordSearchComponent';\r\n  }\r\n\r\n  protected onSaveState() {\r\n    return {\r\n      gridInputText: this._gridInputText,\r\n      wordListInputText: this._wordListInputText,\r\n      useDiagonals: this._useDiagonals,\r\n      useCardinals: this._useCardinals,\r\n    };\r\n  }\r\n\r\n  protected onRestoreState(savedState: SavedState | null) {\r\n    if (savedState !== null) {\r\n      this._gridInputText = savedState.gridInputText;\r\n      this._wordListInputText = savedState.wordListInputText;\r\n      this._useDiagonals = savedState.useDiagonals;\r\n      this._useCardinals = savedState.useCardinals;\r\n    }\r\n  }\r\n\r\n  protected onUpdateState() {\r\n    this.setState({\r\n      gridInputText: this._gridInputText,\r\n      wordListInputText: this._wordListInputText,\r\n      useDiagonals: this._useDiagonals,\r\n      useCardinals: this._useCardinals,\r\n    });\r\n  }\r\n\r\n  private onGridTextChanged(event: FormEvent<FormControlProps>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._gridInputText = element.value;\r\n    this.updateState();\r\n  }\r\n\r\n  private onListTextChanged(event: FormEvent<FormControlProps>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._wordListInputText = element.value;\r\n    this.updateState();\r\n  }\r\n\r\n  private onCardinalCheckboxChange(event: FormEvent<HTMLInputElement>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._useCardinals = element.checked;\r\n    this.updateState();\r\n  }\r\n\r\n  private onDiagonalCheckboxChange(event: FormEvent<HTMLInputElement>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._useDiagonals = element.checked;\r\n    this.updateState();\r\n  }\r\n\r\n  private renderEmptyDirection() {\r\n    if (this._useCardinals || this._useDiagonals) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Alert variant=\"warning\">\r\n        No directions are selected. No results will be shown.\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  private renderOutput() {\r\n    // Save work if possible\r\n    if (!this._gridInputText.trim()) {\r\n      return [];\r\n    }\r\n\r\n    // get inputs\r\n    const lines = this._gridInputText.split(/\\r?\\n/);\r\n    const wordList = this._wordListInputText.split(/\\r?\\n/);\r\n\r\n    const wordsToFind = wordList.filter(word => word.length > 0);\r\n\r\n    let charArray: string[][];\r\n    charArray = [];\r\n    for (const line of lines) {\r\n      charArray.push(line.split(''));\r\n    }\r\n\r\n    let wordSearchDirection: WordSearchDirection;\r\n    if (this._useCardinals && this._useDiagonals) {\r\n      wordSearchDirection = WordSearchDirection.CardinalAndDiagonal;\r\n    } else if (this._useCardinals) {\r\n      wordSearchDirection = WordSearchDirection.Cardinal;\r\n    } else if (this._useDiagonals) {\r\n      wordSearchDirection = WordSearchDirection.Diagonal;\r\n    } else {\r\n      wordSearchDirection = WordSearchDirection.None;\r\n    }\r\n\r\n    // find the results\r\n    const solver = new WordSearchSolver();\r\n    solver.setDirections(wordSearchDirection);\r\n    solver.setGrid(charArray);\r\n    solver.setWords(wordsToFind);\r\n    const results = solver.findWords();\r\n\r\n    // display / highlight the results\r\n    const shoudHighlight = this.highlightArray(charArray, results);\r\n\r\n    let result = [];\r\n\r\n    for (let y = 0; y < charArray.length; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < charArray[y].length; x++) {\r\n        let reactKey = x.toString() + y.toString();\r\n        if (shoudHighlight[y][x] !== 0) {\r\n          row.push(<td key={reactKey} className=\"WordSearchComponent-HighlightChar\">{charArray[y][x]}</td>);\r\n        } else {\r\n          row.push(<td key={reactKey}>{charArray[y][x]}</td>);\r\n        }\r\n      }\r\n\r\n      result.push(<tr key={y}>{row}</tr>);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private highlightArray(inputGrid: string[][], results: WordSearchResult[]) {\r\n    let shouldHighlight: number[][];\r\n    shouldHighlight = [];\r\n\r\n    for (const line of inputGrid) {\r\n      const hightlightLine = Array.from({ length: line.length }, (v, i) => 0);\r\n      shouldHighlight.push(hightlightLine);\r\n    }\r\n\r\n    for (const result of results) {\r\n      for (const point of result.points) {\r\n        shouldHighlight[point.y][point.x] = 1;\r\n      }\r\n    }\r\n\r\n    return shouldHighlight;\r\n  }\r\n}\r\n\r\nexport default WordSearchComponent;\r\n","import React, { Component } from 'react';\r\nimport WordSearchComponent from '../../Solvers/WordSearchComponent';\r\nimport './WordSearch.scss';\r\n\r\nclass WordSearch extends Component {\r\n  public render() {\r\n    return (\r\n      <div className=\"WordSearch\">\r\n        <h2>Word Search</h2>\r\n        <WordSearchComponent />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordSearch;\r\n"],"sourceRoot":""}