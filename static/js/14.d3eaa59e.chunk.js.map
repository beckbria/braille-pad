{"version":3,"sources":["Hooks/LocalStorage.ts","version.ts","Data/LocalStorage.ts","Hooks/FocusInput.ts","Solvers/WordSearchOutput.tsx","Solvers/WordSearchComponent.tsx","Views/Solvers/WordSearch.tsx"],"names":["useLocalStorage","localStorageKey","onRestoreState","onSaveState","useLayoutEffect","getLocalStorageObject","useEffect","setLocalStorageObject","version","isSupported","VERSION_STORAGE_KEY","STORAGE_KEY_PREFIX","getKey","key","clearOnVersionMismatch","value","prev","current","compareVersions","didVersionChange","isLocalStorageSupported","window","localStorage","getItem","getLocalStorageItem","clearLocalStorage","setItem","undefined","storage","x","removeItem","e","DOMException","code","name","length","objString","JSON","parse","object","stringify","clear","useFocusInput","useCallback","node","focus","splitLines","str","split","getGridHighlights","grid","wordsToFind","direction","canBend","solver","WordSearchSolver","setDirections","setCanBend","setGrid","setWords","inputGrid","results","shouldHighlight","line","hightlightLine","Array","from","push","result","points","point","y","highlightArray","findWords","getColumnClassName","WordSearchOutput","props","gridInputText","trim","lines","useCardinals","useDiagonals","WordSearchDirection","CardinalAndDiagonal","Cardinal","Diagonal","None","wordListInputText","filter","word","Table","className","borderless","map","row","rowIndex","col","colIndex","WordSearchComponent","inputRef","useState","setGridInputText","setWordListInputText","setUseCardinals","setUseDiagonals","savedState","Container","fluid","Row","noGutters","Col","md","Card","Header","Body","FormControl","as","onChange","event","element","target","placeholder","Alert","variant","renderEmptyDirection","FormCheck","checked","id","label","type","ref","spellCheck","WordSearch"],"mappings":"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","file":"static/js/14.d3eaa59e.chunk.js","sourcesContent":["import { useEffect, useLayoutEffect } from 'react';\nimport { getLocalStorageObject, setLocalStorageObject } from '../Data/LocalStorage';\n\nexport function useLocalStorage<T>(\n  localStorageKey: string,\n  onRestoreState: (state: T | null) => void,\n  onSaveState: () => T) {\n  // This effect runs synchronously on the first mount of the control or\n  // whenever the `localStorageKey` value changes. This is to ensure that there\n  // is no flickering as the data is rendered. `onRestoreState` is intentionally\n  // omitted from deps since each call will have a unique version of the\n  // function.\n  useLayoutEffect(\n    () => onRestoreState(getLocalStorageObject<T>(localStorageKey)),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [localStorageKey]);\n\n  // This effect runs on every update of the control because the deps parameter\n  // is intentionally omitted.\n  useEffect(() => setLocalStorageObject(localStorageKey, onSaveState()));\n}\n","// generated by genversion\nexport const version = '0.7.0';\n","import compareVersions from 'compare-versions';\nimport { version } from '../version';\n\nconst VERSION_STORAGE_KEY = 'appVersion';\nconst STORAGE_KEY_PREFIX = 'puzztool';\nlet isSupported: boolean;\n\nfunction getKey(key: string) {\n  return `${STORAGE_KEY_PREFIX}_${key}`;\n}\n\nfunction didVersionChange(prev: string | null, current: string) {\n  try {\n    if (prev) {\n      return compareVersions(current, prev) !== 0;\n    }\n  } catch {\n    // Something went wrong with parsing.\n  }\n\n  // If there's no existing version number or we had an exception while\n  // comparing it, just return `true` to play it safe.\n  return true;\n}\n\nfunction clearOnVersionMismatch() {\n  const prevVersion = getLocalStorageItem(VERSION_STORAGE_KEY);\n  if (didVersionChange(prevVersion, version)) {\n    // If the current localstorage was created with another version of\n    // PuzzTool, clear the local storage to get rid of any obsolete or\n    // incompatible artifacts.\n    clearLocalStorage();\n\n    // Store the current version\n    setLocalStorageItem(VERSION_STORAGE_KEY, version);\n  }\n}\n\nfunction isLocalStorageSupported() {\n  if (isSupported === undefined) {\n    const storage = window.localStorage;\n    const x = '__storage_test__';\n\n    try {\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      isSupported = true;\n    } catch (e) {\n      isSupported = e instanceof DOMException && (\n        // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage.length !== 0;\n    }\n\n    if (isSupported) {\n      clearOnVersionMismatch();\n    }\n  }\n\n  return isSupported;\n}\n\nfunction getLocalStorageItem(key: string) {\n  if (isLocalStorageSupported()) {\n    return window.localStorage.getItem(getKey(key));\n  }\n\n  return null;\n}\n\nfunction setLocalStorageItem(key: string, value: string) {\n  if (isLocalStorageSupported()) {\n    window.localStorage.setItem(getKey(key), value);\n  }\n}\n\nexport function getLocalStorageObject<T>(key: string) {\n  if (isLocalStorageSupported()) {\n    const objString = window.localStorage.getItem(getKey(key));\n\n    if (objString !== null) {\n      return JSON.parse(objString) as T;\n    }\n  }\n\n  return null;\n}\n\nexport function setLocalStorageObject<T>(key: string, object: T) {\n  if (isLocalStorageSupported()) {\n    window.localStorage.setItem(getKey(key), JSON.stringify(object));\n  }\n}\n\nexport function clearLocalStorage() {\n  if (isLocalStorageSupported()) {\n    window.localStorage.clear();\n  }\n}\n","import { useCallback } from 'react';\n\nexport function useFocusInput() {\n  // This callback is only executed once per change of the returned variable.\n  return useCallback(\n    (node) => {\n      if (node) {\n        node.focus();\n      }\n    },\n    []);\n}\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport {\n  WordSearchSolver,\n  WordSearchResult,\n  WordSearchDirection,\n} from 'puzzle-lib';\nimport './WordSearchOutput.scss';\n\ninterface Props {\n  gridInputText: string;\n  useCardinals: boolean;\n  useDiagonals: boolean;\n  canBend: boolean;\n  wordListInputText: string;\n}\n\nfunction getWordSearchDirection(useCardinals: boolean, useDiagonals: boolean) {\n  if (useCardinals && useDiagonals) {\n    return WordSearchDirection.CardinalAndDiagonal;\n  } else if (useCardinals) {\n    return WordSearchDirection.Cardinal;\n  } else if (useDiagonals) {\n    return WordSearchDirection.Diagonal;\n  }\n\n  return WordSearchDirection.None;\n}\n\nfunction splitLines(str: string) {\n  return str.split(/\\r?\\n/);\n}\n\nfunction highlightArray(inputGrid: string[][], results: WordSearchResult[]) {\n  const shouldHighlight: boolean[][] = [];\n\n  for (const line of inputGrid) {\n    const hightlightLine = Array.from({ length: line.length }, () => false);\n    shouldHighlight.push(hightlightLine);\n  }\n\n  for (const result of results) {\n    for (const point of result.points) {\n      shouldHighlight[point.y][point.x] = true;\n    }\n  }\n\n  return shouldHighlight;\n}\n\nfunction getGridHighlights(\n  grid: string[][],\n  wordsToFind: string[],\n  direction: WordSearchDirection,\n  canBend: boolean) {\n  const solver = new WordSearchSolver();\n  solver.setDirections(direction);\n  solver.setCanBend(canBend);\n  solver.setGrid(grid);\n  solver.setWords(wordsToFind);\n  const results = solver.findWords();\n\n  return highlightArray(grid, results);\n}\n\nfunction getColumnClassName(shouldHighlight: boolean) {\n  return shouldHighlight ? 'WordSearchOutput-highlightChar' : '';\n}\n\nfunction WordSearchOutput(props: Props) {\n  const gridInputText = props.gridInputText.trim();\n  if (!gridInputText) {\n    return null;\n  }\n\n  const lines = splitLines(gridInputText);\n  const grid: string[][] = [];\n  for (const line of lines) {\n    grid.push(line.split(''));\n  }\n\n  // Process direction settings\n  const direction = getWordSearchDirection(\n    props.useCardinals,\n    props.useDiagonals);\n\n  // Split on newlines, trim any whitespace, and filter out empty lines.\n  const wordList = splitLines(props.wordListInputText)\n    .filter(word => word.length > 0);\n\n  const shouldHighlight = getGridHighlights(grid, wordList, direction, props.canBend);\n\n  return (\n    <Table className=\"WordSearchOutput\" borderless={true}>\n      <tbody>\n        {grid.map((row, rowIndex) => (\n          <tr key={rowIndex}>\n            {row.map((col, colIndex) => (\n              <td\n                className={getColumnClassName(shouldHighlight[rowIndex][colIndex])}\n                key={`${rowIndex},${colIndex}`}\n              >\n                {col}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default WordSearchOutput;\n","import React, { FormEvent, useState } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport FormCheck from 'react-bootstrap/FormCheck';\r\nimport FormControl, { FormControlProps } from 'react-bootstrap/FormControl';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { useFocusInput } from '../Hooks/FocusInput';\r\nimport { useLocalStorage } from '../Hooks/LocalStorage';\r\nimport WordSearchOutput from './WordSearchOutput';\r\nimport './WordSearchComponent.scss';\r\n\r\ninterface SavedState {\r\n  gridInputText: string;\r\n  wordListInputText: string;\r\n  useDiagonals: boolean;\r\n  useCardinals: boolean;\r\n  canBend: boolean;\r\n}\r\n\r\nfunction WordSearchComponent() {\r\n  const inputRef = useFocusInput();\r\n  const [gridInputText, setGridInputText] = useState('');\r\n  const [wordListInputText, setWordListInputText] = useState('');\r\n  const [useCardinals, setUseCardinals] = useState(true);\r\n  const [useDiagonals, setUseDiagonals] = useState(true);\r\n  const [canBend, setCanBend] = useState(false);\r\n\r\n  useLocalStorage<SavedState>(\r\n    'WordSearchComponent',\r\n    (savedState) => {\r\n      if (savedState) {\r\n        setGridInputText(savedState.gridInputText);\r\n        setWordListInputText(savedState.wordListInputText);\r\n        setUseCardinals(savedState.useCardinals);\r\n        setUseDiagonals(savedState.useDiagonals);\r\n        setCanBend(savedState.canBend);\r\n      }\r\n    },\r\n    () => {\r\n      return {\r\n        gridInputText,\r\n        wordListInputText,\r\n        useCardinals,\r\n        useDiagonals,\r\n        canBend,\r\n      };\r\n    });\r\n\r\n  function onGridTextChanged(event: FormEvent<FormControlProps>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    setGridInputText(element.value);\r\n  }\r\n\r\n  function onListTextChanged(event: FormEvent<FormControlProps>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    setWordListInputText(element.value);\r\n  }\r\n\r\n  function onCardinalCheckboxChange(event: FormEvent<HTMLInputElement>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    setUseCardinals(element.checked);\r\n  }\r\n\r\n  function onDiagonalCheckboxChange(event: FormEvent<HTMLInputElement>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    setUseDiagonals(element.checked);\r\n  }\r\n\r\n  function onSetCanBendChange(event: FormEvent<HTMLInputElement>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    setCanBend(element.checked);\r\n  }\r\n\r\n  function renderEmptyDirection() {\r\n    if (!useCardinals && !useDiagonals) {\r\n      return (\r\n        <Alert variant=\"warning\">\r\n          No directions are selected. No results will be shown.\r\n        </Alert>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"WordSearchComponent\">\r\n      <Container fluid={true}>\r\n        <Row noGutters={true}>\r\n          <Col md={4}>\r\n            <Card className=\"WordSearchComponent-ListInput\">\r\n              <Card.Header>\r\n                Enter the list of words to find, one word per line\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <FormControl\r\n                  as=\"textarea\"\r\n                  onChange={onListTextChanged}\r\n                  placeholder=\"Word List To Find\"\r\n                  value={wordListInputText}\r\n                />\r\n                {renderEmptyDirection()}\r\n                <FormCheck\r\n                  checked={useDiagonals}\r\n                  id=\"WordSearchComponent-checkbox-diagonal\"\r\n                  label=\"Use diagonal directions\"\r\n                  onChange={onDiagonalCheckboxChange}\r\n                  type=\"checkbox\"\r\n                />\r\n                <FormCheck\r\n                  checked={useCardinals}\r\n                  id=\"WordSearchComponent-checkbox-cardinal\"\r\n                  label=\"Use cardinal directions\"\r\n                  onChange={onCardinalCheckboxChange}\r\n                  type=\"checkbox\"\r\n                />\r\n                <FormCheck\r\n                  checked={canBend}\r\n                  id=\"WordSearchComponent-checkbox-bend\"\r\n                  label=\"Words can bend (may not be straight lines)\"\r\n                  onChange={onSetCanBendChange}\r\n                  type=\"checkbox\"\r\n                />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          <Col md={8}>\r\n            <Card className=\"WordSearchComponent-GridInput\">\r\n              <Card.Header>\r\n                Enter the word search grid, one row of letters per line\r\n              </Card.Header>\r\n              <Card.Body>\r\n                <FormControl\r\n                  as=\"textarea\"\r\n                  onChange={onGridTextChanged}\r\n                  placeholder=\"Grid Text\"\r\n                  ref={inputRef}\r\n                  spellCheck={false}\r\n                  value={gridInputText}\r\n                />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row noGutters={true}>\r\n          <Col md={12}>\r\n            <Card className=\"WordSearchComponent-GridOutput\">\r\n              <Card.Header>Output</Card.Header>\r\n              <Card.Body>\r\n                <WordSearchOutput\r\n                  gridInputText={gridInputText}\r\n                  useCardinals={useCardinals}\r\n                  useDiagonals={useDiagonals}\r\n                  canBend={canBend}\r\n                  wordListInputText={wordListInputText}\r\n                />\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordSearchComponent;\r\n","import React from 'react';\r\nimport WordSearchComponent from '../../Solvers/WordSearchComponent';\r\nimport './WordSearch.scss';\r\n\r\nfunction WordSearch() {\r\n  return (\r\n    <div className=\"WordSearch\">\r\n      <h2>Word Search</h2>\r\n      <WordSearchComponent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordSearch;\r\n"],"sourceRoot":""}