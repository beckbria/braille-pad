{"version":3,"sources":["Data/LocalStorageComponent.ts","Data/LocalStorage.ts","version.ts","Solvers/WordSearchComponent.tsx","Views/Solvers/WordSearch.tsx"],"names":["LocalStorageComponent","this","restoreState","updateState","onUpdateState","saveState","LocalStorage","setObject","getLocalStorageKey","onSaveState","onRestoreState","getObject","Component","undefined","_isSupported","storage","window","localStorage","x","setItem","removeItem","e","DOMException","code","name","length","clearOnVersionMismatch","key","isSupported","getItem","getKey","objString","JSON","parse","value","object","stringify","clear","STORAGE_KEY_PREFIX","prev","current","compareVersions","prevVersion","VERSION_STORAGE_KEY","didVersionChange","version","WordSearchComponent","props","_input","React","createRef","_gridInputText","_wordListInputText","_useCardinals","_useDiagonals","state","gridInputText","wordListInputText","useCardinals","useDiagonals","element","focus","className","fluid","noGutters","md","Header","Body","as","label","onChange","event","onListTextChanged","placeholder","renderEmptyDirection","checked","id","onDiagonalCheckboxChange","type","onCardinalCheckboxChange","onGridTextChanged","ref","spellCheck","borderless","renderOutput","savedState","setState","target","variant","trim","lines","split","wordsToFind","filter","word","charArray","line","push","wordSearchDirection","WordSearchDirection","None","CardinalAndDiagonal","Cardinal","Diagonal","solver","WordSearchSolver","setDirections","setGrid","setWords","results","findWords","shoudHighlight","highlightArray","result","y","row","reactKey","toString","inputGrid","shouldHighlight","hightlightLine","Array","from","v","i","points","point","WordSearch"],"mappings":"uKAGeA,E,4LAEXC,KAAKC,eACLD,KAAKE,gB,oCAILF,KAAKG,gBACLH,KAAKI,c,kCASLC,IAAaC,UAAsBN,KAAKO,qBAAsBP,KAAKQ,iB,qCAInER,KAAKS,eAAeJ,IAAaK,UAAsBV,KAAKO,2B,GArBcI,aAyB/DZ,O,gFCzBTM,E,2GAMF,QAA0BO,IAAtBZ,KAAKa,aAA4B,CACnC,IAAMC,EAAUC,OAAOC,aACjBC,EAAI,mBAEV,IACEH,EAAQI,QAAQD,EAAGA,GACnBH,EAAQK,WAAWF,GACnBjB,KAAKa,cAAe,EACpB,MAAOO,GACPpB,KAAKa,aAAeO,aAAaC,eAEpB,KAAXD,EAAEE,MAES,OAAXF,EAAEE,MAGS,uBAAXF,EAAEG,MAES,+BAAXH,EAAEG,OAEiB,IAAnBT,EAAQU,OAGRxB,KAAKa,cACPb,KAAKyB,yBAIT,OAAOzB,KAAKa,e,8BAGQa,GACpB,OAAI1B,KAAK2B,cACAZ,OAAOC,aAAaY,QAAQ5B,KAAK6B,OAAOH,IAG1C,O,gCAGkBA,GACzB,GAAI1B,KAAK2B,cAAe,CACtB,IAAMG,EAAYf,OAAOC,aAAaY,QAAQ5B,KAAK6B,OAAOH,IAE1D,GAAkB,OAAdI,EACF,OAAOC,KAAKC,MAAMF,GAItB,OAAO,O,8BAGaJ,EAAaO,GAC7BjC,KAAK2B,eACPZ,OAAOC,aAAaE,QAAQlB,KAAK6B,OAAOH,GAAMO,K,gCAIvBP,EAAaQ,GAClClC,KAAK2B,eACPZ,OAAOC,aAAaE,QAAQlB,KAAK6B,OAAOH,GAAMK,KAAKI,UAAUD,M,8BAK3DlC,KAAK2B,eACPZ,OAAOC,aAAaoB,U,6BAIFV,GACpB,MAAM,GAAN,OAAU1B,KAAKqC,mBAAf,YAAqCX,K,uCAGPY,EAAqBC,GACnD,IACE,GAAID,EACF,OAA0C,IAAnCE,IAAgBD,EAASD,GAElC,UAMF,OAAO,I,+CAIP,IAAMG,EAAczC,KAAK4B,QAAQ5B,KAAK0C,qBAClC1C,KAAK2C,iBAAiBF,EAAaG,OAIrC5C,KAAKoC,QAGLpC,KAAKkB,QAAQlB,KAAK0C,oBAAqBE,U,KAtGvCvC,EACoBqC,oBAAsB,aAD1CrC,EAEoBgC,mBAAqB,WAFzChC,EAGWQ,kB,EAwGFR,O,iCC9Gf,kCACO,IAAMuC,EAAU,S,2TC4QRC,G,mBAzOb,WAAYC,GAAe,IAAD,8BACxB,4CAAMA,KAPSC,OAASC,IAAMC,YAMN,EALlBC,eAAyB,GAKP,EAJlBC,mBAA6B,GAIX,EAHlBC,eAAyB,EAGP,EAFlBC,eAAyB,EAI/B,EAAKC,MAAQ,CACXC,cAAe,GACfC,kBAAmB,GACnBC,cAAc,EACdC,cAAc,GANQ,E,iFAWxB,0EAEA,IAAMC,EAAU3D,KAAK+C,OAAOR,QACxBoB,GACFA,EAAQC,U,+BAIK,IAAD,OACd,OACE,yBAAKC,UAAU,uBACb,kBAAC,IAAD,CAAWC,OAAO,GAChB,kBAAC,IAAD,CAAKC,WAAW,GACd,kBAAC,IAAD,CAAKC,GAAI,GACP,kBAAC,IAAD,CAAMH,UAAU,iCACd,kBAAC,IAAKI,OAAN,2DACA,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,CACEC,GAAG,WACHN,UAAU,gCACVO,MAAM,0DACNC,SAAU,SAACC,GAAD,OAAwC,EAAKC,kBAAkBD,IACzEE,YAAY,oBACZvC,MAAOjC,KAAKsD,MAAME,oBAEnBxD,KAAKyE,uBACN,kBAAC,IAAD,CACEC,QAAS1E,KAAKqD,cACdsB,GAAG,wCACHP,MAAM,0BACNC,SACE,SAACC,GAAD,OAAwC,EAAKM,yBAAyBN,IAExEO,KAAK,aAEP,kBAAC,IAAD,CACEH,QAAS1E,KAAKoD,cACduB,GAAG,wCACHP,MAAM,0BACNC,SACE,SAACC,GAAD,OAAwC,EAAKQ,yBAAyBR,IAExEO,KAAK,gBAKb,kBAAC,IAAD,CAAKb,GAAI,GACP,kBAAC,IAAD,CAAMH,UAAU,iCACd,kBAAC,IAAKI,OAAN,gEACA,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,CACEC,GAAG,WACHE,SAAU,SAACC,GAAD,OAAwC,EAAKS,kBAAkBT,IACzEE,YAAY,YACZQ,IAAKhF,KAAK+C,OACVkC,YAAY,EACZhD,MAAOjC,KAAKsD,MAAMC,oBAM5B,kBAAC,IAAD,CAAKQ,WAAW,GACd,kBAAC,IAAD,CAAKC,GAAI,IACP,kBAAC,IAAD,CAAMH,UAAU,kCACd,kBAAC,IAAKI,OAAN,eACA,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,CAAOL,UAAU,kCAAkCqB,YAAY,GAC7D,+BACGlF,KAAKmF,yB,2CAaxB,MAAO,wB,oCAIP,MAAO,CACL5B,cAAevD,KAAKkD,eACpBM,kBAAmBxD,KAAKmD,mBACxBO,aAAc1D,KAAKqD,cACnBI,aAAczD,KAAKoD,iB,qCAIEgC,GACJ,OAAfA,IACFpF,KAAKkD,eAAiBkC,EAAW7B,cACjCvD,KAAKmD,mBAAqBiC,EAAW5B,kBACrCxD,KAAKqD,cAAgB+B,EAAW1B,aAChC1D,KAAKoD,cAAgBgC,EAAW3B,gB,sCAKlCzD,KAAKqF,SAAS,CACZ9B,cAAevD,KAAKkD,eACpBM,kBAAmBxD,KAAKmD,mBACxBO,aAAc1D,KAAKqD,cACnBI,aAAczD,KAAKoD,kB,wCAIGkB,GACxB,IAAMX,EAAWW,EAAMgB,OACvBtF,KAAKkD,eAAiBS,EAAQ1B,MAC9BjC,KAAKE,gB,wCAGmBoE,GACxB,IAAMX,EAAWW,EAAMgB,OACvBtF,KAAKmD,mBAAqBQ,EAAQ1B,MAClCjC,KAAKE,gB,+CAG0BoE,GAC/B,IAAMX,EAAWW,EAAMgB,OACvBtF,KAAKoD,cAAgBO,EAAQe,QAC7B1E,KAAKE,gB,+CAG0BoE,GAC/B,IAAMX,EAAWW,EAAMgB,OACvBtF,KAAKqD,cAAgBM,EAAQe,QAC7B1E,KAAKE,gB,6CAIL,OAAIF,KAAKoD,eAAiBpD,KAAKqD,cACtB,KAIP,kBAAC,IAAD,CAAOkC,QAAQ,WAAf,2D,qCAQF,IAAKvF,KAAKkD,eAAesC,OACvB,MAAO,GAIT,IAAMC,EAAQzF,KAAKkD,eAAewC,MAAM,SAGlCC,EAFW3F,KAAKmD,mBAAmBuC,MAAM,SAElBE,QAAO,SAAAC,GAAI,OAAIA,EAAKrE,OAAS,KAEpDsE,EAAwB,GAZT,uBAarB,YAAmBL,EAAnB,+CAA0B,CAAC,IAAhBM,EAAe,QACxBD,EAAUE,KAAKD,EAAKL,MAAM,MAdP,kFAiBrB,IAAIO,EAA2CC,sBAAoBC,KAC/DnG,KAAKoD,eAAiBpD,KAAKqD,cAC7B4C,EAAsBC,sBAAoBE,oBACjCpG,KAAKoD,cACd6C,EAAsBC,sBAAoBG,SACjCrG,KAAKqD,gBACd4C,EAAsBC,sBAAoBI,UAI5C,IAAMC,EAAS,IAAIC,mBACnBD,EAAOE,cAAcR,GACrBM,EAAOG,QAAQZ,GACfS,EAAOI,SAAShB,GAQhB,IAPA,IAAMiB,EAAUL,EAAOM,YAGjBC,EAAiB9G,KAAK+G,eAAejB,EAAWc,GAEhDI,EAAS,GAENC,EAAI,EAAGA,EAAInB,EAAUtE,OAAQyF,IAAK,CAEzC,IADA,IAAMC,EAAM,GACHjG,EAAI,EAAGA,EAAI6E,EAAUmB,GAAGzF,OAAQP,IAAK,CAC5C,IAAMkG,EAAWlG,EAAEmG,WAAaH,EAAEG,WACL,IAAzBN,EAAeG,GAAGhG,GACpBiG,EAAIlB,KAAK,wBAAItE,IAAKyF,EAAUtD,UAAU,qCAAqCiC,EAAUmB,GAAGhG,KAExFiG,EAAIlB,KAAK,wBAAItE,IAAKyF,GAAWrB,EAAUmB,GAAGhG,KAI9C+F,EAAOhB,KAAK,wBAAItE,IAAKuF,GAAIC,IAG3B,OAAOF,I,qCAGcK,EAAuBT,GAC5C,IAAMU,EAA8B,GADqC,uBAGzE,YAAmBD,EAAnB,+CAA8B,CAAC,IAApBtB,EAAmB,QACtBwB,EAAiBC,MAAMC,KAAK,CAAEjG,OAAQuE,EAAKvE,SAAU,SAACkG,EAAGC,GAAJ,OAAU,KACrEL,EAAgBtB,KAAKuB,IALkD,6GAQzE,YAAqBX,EAArB,+CAA8B,CAAC,IAApBI,EAAmB,+BAC5B,YAAoBA,EAAOY,OAA3B,+CAAmC,CAAC,IAAzBC,EAAwB,QACjCP,EAAgBO,EAAMZ,GAAGY,EAAM5G,GAAK,GAFV,oFAR2C,kFAczE,OAAOqG,M,GA5OuBvH,M,OChBnB+H,UATf,WACE,OACE,yBAAKjE,UAAU,cACb,2CACA,kBAAC,EAAD","file":"static/js/14.e22b3481.chunk.js","sourcesContent":["import { Component } from 'react';\nimport LocalStorage from './LocalStorage';\n\nabstract class LocalStorageComponent<P = {}, S = {}, SavedState = {}> extends Component<P, S> {\n  public componentDidMount() {\n    this.restoreState();\n    this.updateState();\n  }\n\n  protected updateState() {\n    this.onUpdateState();\n    this.saveState();\n  }\n\n  protected abstract getLocalStorageKey(): string;\n  protected abstract onSaveState(): SavedState;\n  protected abstract onRestoreState(savedState: SavedState | null): void;\n  protected abstract onUpdateState(): void;\n\n  private saveState() {\n    LocalStorage.setObject<SavedState>(this.getLocalStorageKey(), this.onSaveState());\n  }\n\n  private restoreState() {\n    this.onRestoreState(LocalStorage.getObject<SavedState>(this.getLocalStorageKey()));\n  }\n}\n\nexport default LocalStorageComponent;\n","import compareVersions from 'compare-versions';\nimport { version } from '../version';\n\nclass LocalStorage {\n  private static readonly VERSION_STORAGE_KEY = 'appVersion';\n  private static readonly STORAGE_KEY_PREFIX = 'puzztool';\n  private static _isSupported?: boolean;\n\n  public static isSupported() {\n    if (this._isSupported === undefined) {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n\n      try {\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        this._isSupported = true;\n      } catch (e) {\n        this._isSupported = e instanceof DOMException && (\n          // everything except Firefox\n          e.code === 22 ||\n          // Firefox\n          e.code === 1014 ||\n          // test name field too, because code might not be present\n          // everything except Firefox\n          e.name === 'QuotaExceededError' ||\n          // Firefox\n          e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n          // acknowledge QuotaExceededError only if there's something already stored\n          storage.length !== 0;\n      }\n\n      if (this._isSupported) {\n        this.clearOnVersionMismatch();\n      }\n    }\n\n    return this._isSupported;\n  }\n\n  public static getItem(key: string) {\n    if (this.isSupported()) {\n      return window.localStorage.getItem(this.getKey(key));\n    }\n\n    return null;\n  }\n\n  public static getObject<T>(key: string) {\n    if (this.isSupported()) {\n      const objString = window.localStorage.getItem(this.getKey(key));\n\n      if (objString !== null) {\n        return JSON.parse(objString) as T;\n      }\n    }\n\n    return null;\n  }\n\n  public static setItem(key: string, value: string) {\n    if (this.isSupported()) {\n      window.localStorage.setItem(this.getKey(key), value);\n    }\n  }\n\n  public static setObject<T>(key: string, object: T) {\n    if (this.isSupported()) {\n      window.localStorage.setItem(this.getKey(key), JSON.stringify(object));\n    }\n  }\n\n  public static clear() {\n    if (this.isSupported()) {\n      window.localStorage.clear();\n    }\n  }\n\n  private static getKey(key: string) {\n    return `${this.STORAGE_KEY_PREFIX}_${key}`;\n  }\n\n  private static didVersionChange(prev: string | null, current: string) {\n    try {\n      if (prev) {\n        return compareVersions(current, prev) !== 0;\n      }\n    } catch {\n      // Something went wrong with parsing.\n    }\n\n    // If there's no existing version number or we had an exception while\n    // comparing it, just return `true` to play it safe.\n    return true;\n  }\n\n  private static clearOnVersionMismatch() {\n    const prevVersion = this.getItem(this.VERSION_STORAGE_KEY);\n    if (this.didVersionChange(prevVersion, version)) {\n      // If the current localstorage was created with another version of\n      // PuzzTool, clear the local storage to get rid of any obsolete or\n      // incompatible artifacts.\n      this.clear();\n\n      // Store the current version\n      this.setItem(this.VERSION_STORAGE_KEY, version);\n    }\n  }\n}\n\nexport default LocalStorage;\n","// generated by genversion\nexport const version = '0.7.0';\n","import React, { FormEvent } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport FormCheck from 'react-bootstrap/FormCheck';\r\nimport FormControl, { FormControlProps } from 'react-bootstrap/FormControl';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { WordSearchSolver, WordSearchResult, WordSearchDirection } from 'puzzle-lib';\r\nimport LocalStorageComponent from '../Data/LocalStorageComponent';\r\nimport './WordSearchComponent.scss';\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n  gridInputText: string;\r\n  wordListInputText: string;\r\n  useDiagonals: boolean;\r\n  useCardinals: boolean;\r\n}\r\n\r\ninterface SavedState {\r\n  gridInputText: string;\r\n  wordListInputText: string;\r\n  useDiagonals: boolean;\r\n  useCardinals: boolean;\r\n}\r\n\r\nclass WordSearchComponent extends LocalStorageComponent<Props, State, SavedState> {\r\n  private readonly _input = React.createRef<FormControl<'textarea'> & HTMLTextAreaElement>();\r\n  private _gridInputText: string = '';\r\n  private _wordListInputText: string = '';\r\n  private _useCardinals: boolean = true;\r\n  private _useDiagonals: boolean = true;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      gridInputText: '',\r\n      wordListInputText: '',\r\n      useCardinals: true,\r\n      useDiagonals: true,\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    super.componentDidMount();\r\n\r\n    const element = this._input.current;\r\n    if (element) {\r\n      element.focus();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"WordSearchComponent\">\r\n        <Container fluid={true} >\r\n          <Row noGutters={true}>\r\n            <Col md={4}>\r\n              <Card className=\"WordSearchComponent-ListInput\">\r\n                <Card.Header>Enter the list of words to find, one word per line</Card.Header>\r\n                <Card.Body>\r\n                  <FormControl\r\n                    as=\"textarea\"\r\n                    className=\"WordSearchComponent-ListInput\"\r\n                    label=\"Enter the word search grid, one row of letters per line\"\r\n                    onChange={(event: FormEvent<FormControlProps>) => this.onListTextChanged(event)}\r\n                    placeholder=\"Word List To Find\"\r\n                    value={this.state.wordListInputText}\r\n                  />\r\n                  {this.renderEmptyDirection()}\r\n                  <FormCheck\r\n                    checked={this._useDiagonals}\r\n                    id=\"WordSearchComponent-checkbox-diagonal\"\r\n                    label=\"Use diagonal directions\"\r\n                    onChange={\r\n                      (event: FormEvent<HTMLInputElement>) => this.onDiagonalCheckboxChange(event)\r\n                    }\r\n                    type=\"checkbox\"\r\n                  />\r\n                  <FormCheck\r\n                    checked={this._useCardinals}\r\n                    id=\"WordSearchComponent-checkbox-cardinal\"\r\n                    label=\"Use cardinal directions\"\r\n                    onChange={\r\n                      (event: FormEvent<HTMLInputElement>) => this.onCardinalCheckboxChange(event)\r\n                    }\r\n                    type=\"checkbox\"\r\n                  />\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n            <Col md={8}>\r\n              <Card className=\"WordSearchComponent-GridInput\">\r\n                <Card.Header>Enter the word search grid, one row of letters per line</Card.Header>\r\n                <Card.Body>\r\n                  <FormControl\r\n                    as=\"textarea\"\r\n                    onChange={(event: FormEvent<FormControlProps>) => this.onGridTextChanged(event)}\r\n                    placeholder=\"Grid Text\"\r\n                    ref={this._input}\r\n                    spellCheck={false}\r\n                    value={this.state.gridInputText}\r\n                  />\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row noGutters={true}>\r\n            <Col md={12}>\r\n              <Card className=\"WordSearchComponent-GridOutput\">\r\n                <Card.Header>Output</Card.Header>\r\n                <Card.Body>\r\n                  <Table className=\"WordSearchComponent-TableOutput\" borderless={true}>\r\n                    <tbody>\r\n                      {this.renderOutput()}\r\n                    </tbody>\r\n                  </Table>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  protected getLocalStorageKey() {\r\n    return 'WordSearchComponent';\r\n  }\r\n\r\n  protected onSaveState() {\r\n    return {\r\n      gridInputText: this._gridInputText,\r\n      wordListInputText: this._wordListInputText,\r\n      useDiagonals: this._useDiagonals,\r\n      useCardinals: this._useCardinals,\r\n    };\r\n  }\r\n\r\n  protected onRestoreState(savedState: SavedState | null) {\r\n    if (savedState !== null) {\r\n      this._gridInputText = savedState.gridInputText;\r\n      this._wordListInputText = savedState.wordListInputText;\r\n      this._useDiagonals = savedState.useDiagonals;\r\n      this._useCardinals = savedState.useCardinals;\r\n    }\r\n  }\r\n\r\n  protected onUpdateState() {\r\n    this.setState({\r\n      gridInputText: this._gridInputText,\r\n      wordListInputText: this._wordListInputText,\r\n      useDiagonals: this._useDiagonals,\r\n      useCardinals: this._useCardinals,\r\n    });\r\n  }\r\n\r\n  private onGridTextChanged(event: FormEvent<FormControlProps>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._gridInputText = element.value;\r\n    this.updateState();\r\n  }\r\n\r\n  private onListTextChanged(event: FormEvent<FormControlProps>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._wordListInputText = element.value;\r\n    this.updateState();\r\n  }\r\n\r\n  private onCardinalCheckboxChange(event: FormEvent<HTMLInputElement>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._useCardinals = element.checked;\r\n    this.updateState();\r\n  }\r\n\r\n  private onDiagonalCheckboxChange(event: FormEvent<HTMLInputElement>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._useDiagonals = element.checked;\r\n    this.updateState();\r\n  }\r\n\r\n  private renderEmptyDirection() {\r\n    if (this._useCardinals || this._useDiagonals) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Alert variant=\"warning\">\r\n        No directions are selected. No results will be shown.\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  private renderOutput() {\r\n    // Save work if possible\r\n    if (!this._gridInputText.trim()) {\r\n      return [];\r\n    }\r\n\r\n    // get inputs\r\n    const lines = this._gridInputText.split(/\\r?\\n/);\r\n    const wordList = this._wordListInputText.split(/\\r?\\n/);\r\n\r\n    const wordsToFind = wordList.filter(word => word.length > 0);\r\n\r\n    const charArray: string[][] = [];\r\n    for (const line of lines) {\r\n      charArray.push(line.split(''));\r\n    }\r\n\r\n    let wordSearchDirection: WordSearchDirection = WordSearchDirection.None;\r\n    if (this._useCardinals && this._useDiagonals) {\r\n      wordSearchDirection = WordSearchDirection.CardinalAndDiagonal;\r\n    } else if (this._useCardinals) {\r\n      wordSearchDirection = WordSearchDirection.Cardinal;\r\n    } else if (this._useDiagonals) {\r\n      wordSearchDirection = WordSearchDirection.Diagonal;\r\n    }\r\n\r\n    // find the results\r\n    const solver = new WordSearchSolver();\r\n    solver.setDirections(wordSearchDirection);\r\n    solver.setGrid(charArray);\r\n    solver.setWords(wordsToFind);\r\n    const results = solver.findWords();\r\n\r\n    // display / highlight the results\r\n    const shoudHighlight = this.highlightArray(charArray, results);\r\n\r\n    const result = [];\r\n\r\n    for (let y = 0; y < charArray.length; y++) {\r\n      const row = [];\r\n      for (let x = 0; x < charArray[y].length; x++) {\r\n        const reactKey = x.toString() + y.toString();\r\n        if (shoudHighlight[y][x] !== 0) {\r\n          row.push(<td key={reactKey} className=\"WordSearchComponent-HighlightChar\">{charArray[y][x]}</td>);\r\n        } else {\r\n          row.push(<td key={reactKey}>{charArray[y][x]}</td>);\r\n        }\r\n      }\r\n\r\n      result.push(<tr key={y}>{row}</tr>);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n\r\n  private highlightArray(inputGrid: string[][], results: WordSearchResult[]) {\r\n    const shouldHighlight: number[][] = [];\r\n\r\n    for (const line of inputGrid) {\r\n      const hightlightLine = Array.from({ length: line.length }, (v, i) => 0);\r\n      shouldHighlight.push(hightlightLine);\r\n    }\r\n\r\n    for (const result of results) {\r\n      for (const point of result.points) {\r\n        shouldHighlight[point.y][point.x] = 1;\r\n      }\r\n    }\r\n\r\n    return shouldHighlight;\r\n  }\r\n}\r\n\r\nexport default WordSearchComponent;\r\n","import React from 'react';\r\nimport WordSearchComponent from '../../Solvers/WordSearchComponent';\r\nimport './WordSearch.scss';\r\n\r\nfunction WordSearch() {\r\n  return (\r\n    <div className=\"WordSearch\">\r\n      <h2>Word Search</h2>\r\n      <WordSearchComponent />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordSearch;\r\n"],"sourceRoot":""}