{"version":3,"sources":["Data/LocalStorage.ts","version.ts","Data/LocalStorageComponent.ts","Views/TabViewBase.tsx","Hooks/LocalStorage.ts","Common/Helpers.ts","Resistor/ResistorTable.tsx","Resistor/ResistorColorSelector.tsx","Resistor/ResistorPicture.tsx","Resistor/ResistorInput.tsx","Views/Reference/Resistors.tsx"],"names":["LocalStorage","undefined","this","_isSupported","storage","window","localStorage","x","setItem","removeItem","e","DOMException","code","name","length","clearOnVersionMismatch","key","isSupported","getItem","getKey","objString","JSON","parse","value","object","stringify","clear","STORAGE_KEY_PREFIX","prev","current","compareVersions","prevVersion","VERSION_STORAGE_KEY","didVersionChange","version","LocalStorageComponent","restoreState","updateState","onUpdateState","saveState","setObject","getLocalStorageKey","onSaveState","onRestoreState","getObject","Component","TabViewBase","props","_activeKey","state","activeKey","savedState","setState","useLocalStorage","localStorageKey","useLayoutEffect","useEffect","Helpers","background","hexCode","substring","color","parseInt","cellColorStyle","backgroundColor","colorCode","contrastingColor","ResistorTable","className","Table","striped","responsive","Resistor","colorTable","map","style","getDisplayValue","multiplier","toleranceInPercent","ResistorColorSelector","DropdownButton","title","index","id","onSelect","eventKey","handler","onChange","colorByName","colors","itemIndex","Dropdown","Item","ResistorPicture","getBandOffset","bands","renderBand","band","xlinkHref","fill","width","viewBox","y","height","rx","ry","stroke","strokeWidth","getResistorValue","slice","filter","getValue","INVALID_RESISTOR","ResistorInput","initialBands","BLACK","BROWN","useState","setValue","setBands","updateBands","newBands","onColorChange","Array","from","colorsWithValue","hasValue","colorsWithTolerance","hasTolerance","Card","Header","Body","ButtonToolbar","ButtonGroup","Color","Resistors","Tabs","onTabSelect","Tab"],"mappings":"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","file":"static/js/13.9b97a469.chunk.js","sourcesContent":["import compareVersions from 'compare-versions';\nimport { version } from '../version';\n\nclass LocalStorage {\n  private static readonly VERSION_STORAGE_KEY = 'appVersion';\n  private static readonly STORAGE_KEY_PREFIX = 'puzztool';\n  private static _isSupported?: boolean;\n\n  public static isSupported() {\n    if (this._isSupported === undefined) {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n\n      try {\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        this._isSupported = true;\n      } catch (e) {\n        this._isSupported = e instanceof DOMException && (\n          // everything except Firefox\n          e.code === 22 ||\n          // Firefox\n          e.code === 1014 ||\n          // test name field too, because code might not be present\n          // everything except Firefox\n          e.name === 'QuotaExceededError' ||\n          // Firefox\n          e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n          // acknowledge QuotaExceededError only if there's something already stored\n          storage.length !== 0;\n      }\n\n      if (this._isSupported) {\n        this.clearOnVersionMismatch();\n      }\n    }\n\n    return this._isSupported;\n  }\n\n  public static getItem(key: string) {\n    if (this.isSupported()) {\n      return window.localStorage.getItem(this.getKey(key));\n    }\n\n    return null;\n  }\n\n  public static getObject<T>(key: string) {\n    if (this.isSupported()) {\n      const objString = window.localStorage.getItem(this.getKey(key));\n\n      if (objString !== null) {\n        return JSON.parse(objString) as T;\n      }\n    }\n\n    return null;\n  }\n\n  public static setItem(key: string, value: string) {\n    if (this.isSupported()) {\n      window.localStorage.setItem(this.getKey(key), value);\n    }\n  }\n\n  public static setObject<T>(key: string, object: T) {\n    if (this.isSupported()) {\n      window.localStorage.setItem(this.getKey(key), JSON.stringify(object));\n    }\n  }\n\n  public static clear() {\n    if (this.isSupported()) {\n      window.localStorage.clear();\n    }\n  }\n\n  private static getKey(key: string) {\n    return `${this.STORAGE_KEY_PREFIX}_${key}`;\n  }\n\n  private static didVersionChange(prev: string | null, current: string) {\n    try {\n      if (prev) {\n        return compareVersions(current, prev) !== 0;\n      }\n    } catch {\n      // Something went wrong with parsing.\n    }\n\n    // If there's no existing version number or we had an exception while\n    // comparing it, just return `true` to play it safe.\n    return true;\n  }\n\n  private static clearOnVersionMismatch() {\n    const prevVersion = this.getItem(this.VERSION_STORAGE_KEY);\n    if (this.didVersionChange(prevVersion, version)) {\n      // If the current localstorage was created with another version of\n      // PuzzTool, clear the local storage to get rid of any obsolete or\n      // incompatible artifacts.\n      this.clear();\n\n      // Store the current version\n      this.setItem(this.VERSION_STORAGE_KEY, version);\n    }\n  }\n}\n\nexport default LocalStorage;\n","// generated by genversion\nexport const version = '0.7.0';\n","import { Component } from 'react';\nimport LocalStorage from './LocalStorage';\n\nabstract class LocalStorageComponent<P = {}, S = {}, SavedState = {}> extends Component<P, S> {\n  public componentDidMount() {\n    this.restoreState();\n    this.updateState();\n  }\n\n  protected updateState() {\n    this.onUpdateState();\n    this.saveState();\n  }\n\n  protected abstract getLocalStorageKey(): string;\n  protected abstract onSaveState(): SavedState;\n  protected abstract onRestoreState(savedState: SavedState | null): void;\n  protected abstract onUpdateState(): void;\n\n  private saveState() {\n    LocalStorage.setObject<SavedState>(this.getLocalStorageKey(), this.onSaveState());\n  }\n\n  private restoreState() {\n    this.onRestoreState(LocalStorage.getObject<SavedState>(this.getLocalStorageKey()));\n  }\n}\n\nexport default LocalStorageComponent;\n","import LocalStorageComponent from '../Data/LocalStorageComponent';\n\n// To inherit from this class:\n// 1. import Tab from 'react-bootstrap/Tab';\n// 2. import Tabs from 'react-bootstrap/Tabs';\n// 3. override render() and getLocalStorageKey()\n// 4. Ensure your constructor calls super()\n\ninterface Props {}\n\ninterface State {\n  activeKey: number;\n}\n\ninterface SavedState {\n  activeKey: number;\n}\n\nabstract class TabViewBase extends LocalStorageComponent<Props, State, SavedState> {\n  private _activeKey: number = 1;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      activeKey: this._activeKey,\n    };\n  }\n\n  /* Classes derived from TabViewBase should implement the following functions:\n\n  public render() {}\n\n  protected getLocalStorageKey() {\n    return 'YourClassNameHere';\n  }\n  */\n\n  protected onSaveState() {\n    return {\n      activeKey: this._activeKey,\n    };\n  }\n\n  protected onRestoreState(savedState: SavedState | null) {\n    if (savedState !== null) {\n      this._activeKey = savedState.activeKey;\n    }\n  }\n\n  protected onUpdateState() {\n    this.setState({\n      activeKey: this._activeKey,\n    });\n  }\n\n  protected onTabSelect(activeKey: number) {\n    this._activeKey = activeKey;\n    this.updateState();\n  }\n}\n\nexport default TabViewBase;\n","import { useEffect, useLayoutEffect } from 'react';\nimport LocalStorage from '../Data/LocalStorage';\n\nexport function useLocalStorage<T>(\n  localStorageKey: string,\n  onRestoreState: (state: T | null) => void,\n  onSaveState: () => T) {\n  // This effect runs synchronously on the first mount of the control or\n  // whenever the `localStorageKey` value changes. This is to ensure that there\n  // is no flickering as the data is rendered. `onRestoreState` is intentionally\n  // omitted from deps since each call will have a unique version of the\n  // function.\n  useLayoutEffect(\n    () => onRestoreState(LocalStorage.getObject<T>(localStorageKey)),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [localStorageKey]);\n\n  // This effect runs on every update of the control because the deps parameter\n  // is intentionally omitted.\n  useEffect(() => LocalStorage.setObject(localStorageKey, onSaveState()));\n}\n","class Helpers {\n    public static contrastingColor(background: String) {\n        // Calculate Luma as per Rec. 709: https://en.wikipedia.org/wiki/Luma_(video)\n        const hexCode = background.substring(1);  // Remove the leading #\n        const color = parseInt(hexCode, 16);\n        // tslint:disable no-bitwise\n        const red = (color >> 16) & 0xff;\n        const green = (color >> 8) & 0xff;\n        const blue = (color & 0xff);\n        const luma = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n        if (luma < 40) {\n            // Dark background; use bright foreground\n            return '#ffffff';\n        } else {\n            return '#000000';\n        }\n    }\n}\n\nexport default Helpers;\n","import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { ResistorColorEntry as Color, Resistor } from 'puzzle-lib';\nimport Helpers from '../Common/Helpers';\nimport './ResistorTable.scss';\n\nfunction cellColorStyle(value: Color) {\n  return {\n    backgroundColor: value.colorCode,\n    color: Helpers.contrastingColor(value.colorCode),\n  };\n}\n\nfunction ResistorTable() {\n  return (\n    <div className=\"ResistorTable\">\n      <Table striped={true} responsive={true}>\n        <thead>\n          <tr>\n            <th>Color</th>\n            <th>Value</th>\n            <th>Multiplier</th>\n            <th>Tolerance (%)</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Resistor.colorTable.map((value: Color) => (\n            <tr key={value.name}>\n              <td style={cellColorStyle(value)}>{value.name}</td>\n              <td>{value.getDisplayValue()}</td>\n              <td>{value.multiplier}</td>\n              <td>{value.toleranceInPercent}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default ResistorTable;\n","import React from 'react';\nimport { ResistorColorEntry as Color, Resistor } from 'puzzle-lib';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\n\ninterface ColorSelectorProps {\n  colors: Color[];\n  index: number;\n  title: string;\n  onChange?: (index: number, color?: Color) => void;\n}\n\nfunction colorByName(name: String) {\n  for (const color of Resistor.colorTable) {\n    if (name === color.name) {\n      return color;\n    }\n  }\n\n  return undefined;\n}\n\nfunction ResistorColorSelector(props: ColorSelectorProps) {\n  function onSelect(eventKey: string) {\n    const handler = props.onChange;\n    if (handler) {\n      handler(props.index, colorByName(eventKey));\n    }\n  }\n\n  return (\n    <DropdownButton\n      title={props.title}\n      key={props.index}\n      id={`color-select-${props.index}`}\n      onSelect={onSelect}\n    >\n      {props.colors.map((color: Color, itemIndex: number) => {\n        return (\n          <Dropdown.Item key={`${props.index}-${itemIndex}`} eventKey={color.name}>\n            {color.name}\n          </Dropdown.Item>\n        );\n      })}\n    </DropdownButton>\n  );\n}\n\nexport default ResistorColorSelector;\n","import React from 'react';\nimport { ResistorColorEntry as Color } from 'puzzle-lib';\nimport './ResistorInput.scss';\n\ninterface Props {\n  bands: (Color | null)[];\n}\n\nfunction ResistorPicture(props: Props) {\n  function getBandOffset(index: number) {\n    // The tolerance band is spaced further apart than the rest of the bands\n    if (index === (props.bands.length - 1)) {\n      return 104;\n    }\n\n    return (18 * index) + 20;\n  }\n\n  function renderBand(index: number) {\n    const band = props.bands[index];\n    if (band !== null) {\n      return (\n        <use\n          xlinkHref=\"#Band\"\n          x={getBandOffset(index)}\n          fill={band.colorCode}\n        />\n      );\n    }\n  }\n\n  return (\n    <div className=\"ResistorPicture\">\n      <svg width=\"240\" viewBox=\"0 0 136 40\">\n        <defs>\n          <g id=\"Wire\">\n            <rect y=\"20\" height=\"1\" width=\"8\" fill=\"black\" />\n          </g>\n          <g id=\"Resistor\">\n            <rect\n              y=\"8\"\n              x=\"8\"\n              width=\"120\"\n              height=\"24\"\n              rx=\"4\"\n              ry=\"4\"\n              stroke=\"black\"\n              strokeWidth=\"0.5\"\n              fill=\"burlywood\"\n            />\n            <use xlinkHref=\"#Wire\" x=\"0\" />\n            <use xlinkHref=\"#Wire\" x=\"128\" />\n          </g>\n          <g id=\"Band\">\n            <rect y=\"8\" height=\"24\" width=\"12\" stroke=\"black\" strokeWidth=\"0.5\" />\n          </g>\n        </defs>\n        <use xlinkHref=\"#Resistor\" x=\"0\" y=\"0\" />\n        {renderBand(0)}\n        {renderBand(1)}\n        {renderBand(2)}\n        {renderBand(3)}\n        {renderBand(4)}\n        Sorry, your browser does not support inline SVG.\n      </svg>\n    </div>\n  );\n}\n\nexport default ResistorPicture;\n","import React, { useState } from 'react';\nimport { ResistorColorEntry as Color, Resistor } from 'puzzle-lib';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Card from 'react-bootstrap/Card';\nimport { useLocalStorage } from '../Hooks/LocalStorage';\nimport ResistorColorSelector from './ResistorColorSelector';\nimport ResistorPicture from './ResistorPicture';\nimport './ResistorInput.scss';\n\ninterface SavedState {\n  bands: (Color | null)[];\n}\n\nfunction getResistorValue(bands: (Color | null)[]) {\n  // The last band is a tolerance so we need to calculate the value without it.\n  const colors = bands\n    .slice(0, -1)\n    .filter((band) => band !== null) as Color[];\n\n  const value = Resistor.getValue(colors);\n  if (value === Resistor.INVALID_RESISTOR) {\n    return 'Invalid Resistor Colors';\n  } else {\n    return `${Resistor.getDisplayValue(value)} \\u2126 \\u00b1 ${bands[bands.length - 1]!.toleranceInPercent}%`;\n  }\n}\n\nfunction ResistorInput() {\n  const initialBands = [Resistor.BLACK, Resistor.BLACK, Resistor.BLACK, null, Resistor.BROWN];\n  const [value, setValue] = useState(getResistorValue(initialBands));\n  const [bands, setBands] = useState(initialBands);\n\n  useLocalStorage<SavedState>(\n    'ResistorInput',\n    (savedState) => {\n      if (savedState) {\n        updateBands(savedState.bands);\n      }\n    },\n    () => {\n      return { bands };\n    });\n\n  function updateBands(newBands: (Color | null)[]) {\n    setBands(newBands);\n    setValue(getResistorValue(newBands));\n  }\n\n  function onColorChange(index: number, color?: Color) {\n    const newBands = Array.from(bands);\n    newBands[index] = color || null;\n    updateBands(newBands);\n  }\n\n  const colorsWithValue = Resistor.colorTable.filter(color => color.hasValue());\n  const colorsWithTolerance = Resistor.colorTable.filter(color => color.hasTolerance());\n\n  return (\n    <div className=\"ResistorInput\">\n      <Card className=\"ResistorInput-input\">\n        <Card.Header>Input</Card.Header>\n        <Card.Body>\n          <div className=\"ResistorInput-display\">\n            <ResistorPicture bands={bands} />\n          </div>\n          <div className=\"ResistorSelectors\">\n            <ButtonToolbar>\n              <ButtonGroup>\n                <ResistorColorSelector\n                  index={0}\n                  title=\"First Band\"\n                  colors={colorsWithValue}\n                  onChange={onColorChange}\n                />\n              </ButtonGroup>\n              <ButtonGroup>\n                <ResistorColorSelector\n                  index={1}\n                  title=\"Second Band\"\n                  colors={colorsWithValue}\n                  onChange={onColorChange}\n                />\n              </ButtonGroup>\n              <ButtonGroup>\n                <ResistorColorSelector\n                  index={2}\n                  title=\"Third Band\"\n                  colors={Resistor.colorTable}\n                  onChange={onColorChange}\n                />\n              </ButtonGroup>\n              <ButtonGroup>\n                <ResistorColorSelector\n                  index={3}\n                  title=\"Fourth Band\"\n                  colors={[new Color('None', '', 0), ...Resistor.colorTable]}\n                  onChange={onColorChange}\n                />\n              </ButtonGroup>\n              <ButtonGroup>\n                <ResistorColorSelector\n                  index={4}\n                  title=\"Tolerance Band\"\n                  colors={colorsWithTolerance}\n                  onChange={onColorChange}\n                />\n              </ButtonGroup>\n            </ButtonToolbar>\n          </div>\n        </Card.Body>\n      </Card>\n      <Card className=\"ResistorInput-output\">\n        <Card.Header>Output</Card.Header>\n        <Card.Body>\n          {value}\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default ResistorInput;\n","import React from 'react';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\nimport TabViewBase from '../TabViewBase';\nimport ResistorTable from '../../Resistor/ResistorTable';\nimport ResistorInput from '../../Resistor/ResistorInput';\n\nclass Resistors extends TabViewBase {\n  public render() {\n    return (\n      <div className=\"Resistors\">\n        <div className=\"Resistors-content\">\n          <Tabs\n            activeKey={this.state.activeKey}\n            id=\"Resistors-tabs\"\n            // tslint:disable-next-line: no-any\n            onSelect={(activeKey: any) => this.onTabSelect(activeKey as number)}\n          >\n            <Tab eventKey={1} title=\"Value\">\n              <ResistorInput />\n            </Tab>\n            <Tab eventKey={2} title=\"Reference\">\n              <ResistorTable />\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n    );\n  }\n\n  protected getLocalStorageKey() {\n    return 'Resistors';\n  }\n}\n\nexport default Resistors;\n"],"sourceRoot":""}