{"version":3,"sources":["Hooks/LocalStorage.ts","version.ts","Data/LocalStorage.ts","Common/TabsView.tsx","Resistor/ResistorColorSelector.tsx","Resistor/ResistorPicture.tsx","Resistor/ResistorInput.tsx","Common/Helpers.ts","Resistor/ResistorTable.tsx","Views/Reference/Resistors.tsx"],"names":["useLocalStorage","localStorageKey","onRestoreState","onSaveState","useLayoutEffect","getLocalStorageObject","useEffect","setLocalStorageObject","version","isSupported","VERSION_STORAGE_KEY","STORAGE_KEY_PREFIX","getKey","key","clearOnVersionMismatch","value","prev","current","compareVersions","didVersionChange","isLocalStorageSupported","window","localStorage","getItem","getLocalStorageItem","clearLocalStorage","setItem","undefined","storage","x","removeItem","e","DOMException","code","name","length","objString","JSON","parse","object","stringify","clear","TabsView","props","useState","activeKey","setActiveKey","id","savedState","defaultActiveKey","onSelect","eventKey","children","ResistorColorSelector","DropdownButton","title","index","handler","onChange","Resistor","colorTable","color","colorByName","colors","map","itemIndex","Dropdown","Item","ResistorPicture","getBandOffset","bands","renderBand","band","xlinkHref","fill","colorCode","className","width","viewBox","y","height","rx","ry","stroke","strokeWidth","getResistorValue","slice","filter","getValue","INVALID_RESISTOR","getDisplayValue","toleranceInPercent","ResistorInput","initialBands","BLACK","BROWN","setValue","setBands","updateBands","newBands","onColorChange","Array","from","colorsWithValue","hasValue","colorsWithTolerance","hasTolerance","Card","Header","Body","ButtonToolbar","ButtonGroup","Color","getContrastingColor","background","hexCode","substring","parseInt","cellColorStyle","backgroundColor","ResistorTable","Table","striped","responsive","style","multiplier","Resistors","Tab"],"mappings":"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","file":"static/js/15.9a9b0474.chunk.js","sourcesContent":["import { useEffect, useLayoutEffect } from 'react';\nimport { getLocalStorageObject, setLocalStorageObject } from '../Data/LocalStorage';\n\nexport function useLocalStorage<T>(\n  localStorageKey: string,\n  onRestoreState: (state: T | null) => void,\n  onSaveState: () => T) {\n  // This effect runs synchronously on the first mount of the control or\n  // whenever the `localStorageKey` value changes. This is to ensure that there\n  // is no flickering as the data is rendered. `onRestoreState` is intentionally\n  // omitted from deps since each call will have a unique version of the\n  // function.\n  useLayoutEffect(\n    () => onRestoreState(getLocalStorageObject<T>(localStorageKey)),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [localStorageKey]);\n\n  // This effect runs on every update of the control because the deps parameter\n  // is intentionally omitted.\n  useEffect(() => setLocalStorageObject(localStorageKey, onSaveState()));\n}\n","// generated by genversion\nexport const version = '0.7.0';\n","import compareVersions from 'compare-versions';\nimport { version } from '../version';\n\nconst VERSION_STORAGE_KEY = 'appVersion';\nconst STORAGE_KEY_PREFIX = 'puzztool';\nlet isSupported: boolean;\n\nfunction getKey(key: string) {\n  return `${STORAGE_KEY_PREFIX}_${key}`;\n}\n\nfunction didVersionChange(prev: string | null, current: string) {\n  try {\n    if (prev) {\n      return compareVersions(current, prev) !== 0;\n    }\n  } catch {\n    // Something went wrong with parsing.\n  }\n\n  // If there's no existing version number or we had an exception while\n  // comparing it, just return `true` to play it safe.\n  return true;\n}\n\nfunction clearOnVersionMismatch() {\n  const prevVersion = getLocalStorageItem(VERSION_STORAGE_KEY);\n  if (didVersionChange(prevVersion, version)) {\n    // If the current localstorage was created with another version of\n    // PuzzTool, clear the local storage to get rid of any obsolete or\n    // incompatible artifacts.\n    clearLocalStorage();\n\n    // Store the current version\n    setLocalStorageItem(VERSION_STORAGE_KEY, version);\n  }\n}\n\nfunction isLocalStorageSupported() {\n  if (isSupported === undefined) {\n    const storage = window.localStorage;\n    const x = '__storage_test__';\n\n    try {\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      isSupported = true;\n    } catch (e) {\n      isSupported = e instanceof DOMException && (\n        // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage.length !== 0;\n    }\n\n    if (isSupported) {\n      clearOnVersionMismatch();\n    }\n  }\n\n  return isSupported;\n}\n\nfunction getLocalStorageItem(key: string) {\n  if (isLocalStorageSupported()) {\n    return window.localStorage.getItem(getKey(key));\n  }\n\n  return null;\n}\n\nfunction setLocalStorageItem(key: string, value: string) {\n  if (isLocalStorageSupported()) {\n    window.localStorage.setItem(getKey(key), value);\n  }\n}\n\nexport function getLocalStorageObject<T>(key: string) {\n  if (isLocalStorageSupported()) {\n    const objString = window.localStorage.getItem(getKey(key));\n\n    if (objString !== null) {\n      return JSON.parse(objString) as T;\n    }\n  }\n\n  return null;\n}\n\nexport function setLocalStorageObject<T>(key: string, object: T) {\n  if (isLocalStorageSupported()) {\n    window.localStorage.setItem(getKey(key), JSON.stringify(object));\n  }\n}\n\nexport function clearLocalStorage() {\n  if (isLocalStorageSupported()) {\n    window.localStorage.clear();\n  }\n}\n","import React, { useState } from 'react';\nimport Tabs from 'react-bootstrap/Tabs';\nimport { useLocalStorage } from '../Hooks/LocalStorage';\n\ninterface Props {\n  children?: JSX.Element | JSX.Element[];\n  defaultActiveKey?: unknown;\n  id: string;\n}\n\ninterface SavedState {\n  activeKey: string;\n}\n\nfunction TabsView(props: Props) {\n  const [activeKey, setActiveKey] = useState();\n\n  useLocalStorage<SavedState>(\n    props.id,\n    (savedState) => {\n      if (savedState) {\n        setActiveKey(savedState.activeKey);\n      }\n    },\n    () => {\n      return {\n        activeKey,\n      };\n    });\n\n  function onTabSelect(eventKey: string) {\n    setActiveKey(eventKey);\n  }\n\n  return (\n    <Tabs\n      activeKey={activeKey}\n      defaultActiveKey={props.defaultActiveKey}\n      id={props.id}\n      onSelect={onTabSelect}\n    >\n      {props.children}\n    </Tabs>\n  );\n}\n\nexport default TabsView;\n","import React from 'react';\nimport { ResistorColorEntry as Color, Resistor } from 'puzzle-lib';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\n\ninterface ColorSelectorProps {\n  colors: Color[];\n  index: number;\n  title: string;\n  onChange?: (index: number, color?: Color) => void;\n}\n\nfunction colorByName(name: String) {\n  for (const color of Resistor.colorTable) {\n    if (name === color.name) {\n      return color;\n    }\n  }\n\n  return undefined;\n}\n\nfunction ResistorColorSelector(props: ColorSelectorProps) {\n  function onSelect(eventKey: string) {\n    const handler = props.onChange;\n    if (handler) {\n      handler(props.index, colorByName(eventKey));\n    }\n  }\n\n  return (\n    <DropdownButton\n      title={props.title}\n      key={props.index}\n      id={`color-select-${props.index}`}\n      onSelect={onSelect}\n    >\n      {props.colors.map((color: Color, itemIndex: number) => {\n        return (\n          <Dropdown.Item key={`${props.index}-${itemIndex}`} eventKey={color.name}>\n            {color.name}\n          </Dropdown.Item>\n        );\n      })}\n    </DropdownButton>\n  );\n}\n\nexport default ResistorColorSelector;\n","import React from 'react';\nimport { ResistorColorEntry as Color } from 'puzzle-lib';\nimport './ResistorInput.scss';\n\ninterface Props {\n  bands: (Color | null)[];\n}\n\nfunction ResistorPicture(props: Props) {\n  function getBandOffset(index: number) {\n    // The tolerance band is spaced further apart than the rest of the bands\n    if (index === (props.bands.length - 1)) {\n      return 104;\n    }\n\n    return (18 * index) + 20;\n  }\n\n  function renderBand(index: number) {\n    const band = props.bands[index];\n    if (band !== null) {\n      return (\n        <use\n          xlinkHref=\"#Band\"\n          x={getBandOffset(index)}\n          fill={band.colorCode}\n        />\n      );\n    }\n  }\n\n  return (\n    <div className=\"ResistorPicture\">\n      <svg width=\"240\" viewBox=\"0 0 136 40\">\n        <defs>\n          <g id=\"Wire\">\n            <rect y=\"20\" height=\"1\" width=\"8\" fill=\"black\" />\n          </g>\n          <g id=\"Resistor\">\n            <rect\n              y=\"8\"\n              x=\"8\"\n              width=\"120\"\n              height=\"24\"\n              rx=\"4\"\n              ry=\"4\"\n              stroke=\"black\"\n              strokeWidth=\"0.5\"\n              fill=\"burlywood\"\n            />\n            <use xlinkHref=\"#Wire\" x=\"0\" />\n            <use xlinkHref=\"#Wire\" x=\"128\" />\n          </g>\n          <g id=\"Band\">\n            <rect y=\"8\" height=\"24\" width=\"12\" stroke=\"black\" strokeWidth=\"0.5\" />\n          </g>\n        </defs>\n        <use xlinkHref=\"#Resistor\" x=\"0\" y=\"0\" />\n        {renderBand(0)}\n        {renderBand(1)}\n        {renderBand(2)}\n        {renderBand(3)}\n        {renderBand(4)}\n        Sorry, your browser does not support inline SVG.\n      </svg>\n    </div>\n  );\n}\n\nexport default ResistorPicture;\n","import React, { useState } from 'react';\nimport { ResistorColorEntry as Color, Resistor } from 'puzzle-lib';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Card from 'react-bootstrap/Card';\nimport { useLocalStorage } from '../Hooks/LocalStorage';\nimport ResistorColorSelector from './ResistorColorSelector';\nimport ResistorPicture from './ResistorPicture';\nimport './ResistorInput.scss';\n\ninterface SavedState {\n  bands: (Color | null)[];\n}\n\nfunction getResistorValue(bands: (Color | null)[]) {\n  // The last band is a tolerance so we need to calculate the value without it.\n  const colors = bands\n    .slice(0, -1)\n    .filter((band) => band !== null) as Color[];\n\n  const value = Resistor.getValue(colors);\n  if (value === Resistor.INVALID_RESISTOR) {\n    return 'Invalid Resistor Colors';\n  } else {\n    return `${Resistor.getDisplayValue(value)} \\u2126 \\u00b1 ${bands[bands.length - 1]!.toleranceInPercent}%`;\n  }\n}\n\nfunction ResistorInput() {\n  const initialBands = [Resistor.BLACK, Resistor.BLACK, Resistor.BLACK, null, Resistor.BROWN];\n  const [value, setValue] = useState(getResistorValue(initialBands));\n  const [bands, setBands] = useState(initialBands);\n\n  useLocalStorage<SavedState>(\n    'ResistorInput',\n    (savedState) => {\n      if (savedState) {\n        updateBands(savedState.bands);\n      }\n    },\n    () => {\n      return { bands };\n    });\n\n  function updateBands(newBands: (Color | null)[]) {\n    setBands(newBands);\n    setValue(getResistorValue(newBands));\n  }\n\n  function onColorChange(index: number, color?: Color) {\n    const newBands = Array.from(bands);\n    newBands[index] = color || null;\n    updateBands(newBands);\n  }\n\n  const colorsWithValue = Resistor.colorTable.filter(color => color.hasValue());\n  const colorsWithTolerance = Resistor.colorTable.filter(color => color.hasTolerance());\n\n  return (\n    <div className=\"ResistorInput\">\n      <Card className=\"ResistorInput-input\">\n        <Card.Header>Input</Card.Header>\n        <Card.Body>\n          <div className=\"ResistorInput-display\">\n            <ResistorPicture bands={bands} />\n          </div>\n          <div className=\"ResistorSelectors\">\n            <ButtonToolbar>\n              <ButtonGroup>\n                <ResistorColorSelector\n                  index={0}\n                  title=\"First Band\"\n                  colors={colorsWithValue}\n                  onChange={onColorChange}\n                />\n              </ButtonGroup>\n              <ButtonGroup>\n                <ResistorColorSelector\n                  index={1}\n                  title=\"Second Band\"\n                  colors={colorsWithValue}\n                  onChange={onColorChange}\n                />\n              </ButtonGroup>\n              <ButtonGroup>\n                <ResistorColorSelector\n                  index={2}\n                  title=\"Third Band\"\n                  colors={Resistor.colorTable}\n                  onChange={onColorChange}\n                />\n              </ButtonGroup>\n              <ButtonGroup>\n                <ResistorColorSelector\n                  index={3}\n                  title=\"Fourth Band\"\n                  colors={[new Color('None', '', 0), ...Resistor.colorTable]}\n                  onChange={onColorChange}\n                />\n              </ButtonGroup>\n              <ButtonGroup>\n                <ResistorColorSelector\n                  index={4}\n                  title=\"Tolerance Band\"\n                  colors={colorsWithTolerance}\n                  onChange={onColorChange}\n                />\n              </ButtonGroup>\n            </ButtonToolbar>\n          </div>\n        </Card.Body>\n      </Card>\n      <Card className=\"ResistorInput-output\">\n        <Card.Header>Output</Card.Header>\n        <Card.Body>\n          {value}\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default ResistorInput;\n","export function getContrastingColor(background: String) {\n    // Calculate Luma as per Rec. 709: https://en.wikipedia.org/wiki/Luma_(video)\n    const hexCode = background.substring(1);  // Remove the leading #\n    const color = parseInt(hexCode, 16);\n    // tslint:disable no-bitwise\n    const red = (color >> 16) & 0xff;\n    const green = (color >> 8) & 0xff;\n    const blue = (color & 0xff);\n    const luma = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n    if (luma < 40) {\n        // Dark background; use bright foreground\n        return '#ffffff';\n    } else {\n        return '#000000';\n    }\n}\n","import { ResistorColorEntry as Color, Resistor } from 'puzzle-lib';\nimport React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { getContrastingColor } from '../Common/Helpers';\nimport './ResistorTable.scss';\n\nfunction cellColorStyle(value: Color) {\n  return {\n    backgroundColor: value.colorCode,\n    color: getContrastingColor(value.colorCode),\n  };\n}\n\nfunction ResistorTable() {\n  return (\n    <div className=\"ResistorTable\">\n      <Table striped={true} responsive={true}>\n        <thead>\n          <tr>\n            <th>Color</th>\n            <th>Value</th>\n            <th>Multiplier</th>\n            <th>Tolerance (%)</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Resistor.colorTable.map((value: Color) => (\n            <tr key={value.name}>\n              <td style={cellColorStyle(value)}>{value.name}</td>\n              <td>{value.getDisplayValue()}</td>\n              <td>{value.multiplier}</td>\n              <td>{value.toleranceInPercent}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n}\n\nexport default ResistorTable;\n","import React from 'react';\nimport Tab from 'react-bootstrap/Tab';\nimport TabsView from '../../Common/TabsView';\nimport ResistorInput from '../../Resistor/ResistorInput';\nimport ResistorTable from '../../Resistor/ResistorTable';\n\nfunction Resistors() {\n  return (\n    <TabsView id=\"Resistors-tabs\">\n      <Tab eventKey={1} title=\"Value\">\n        <ResistorInput />\n      </Tab>\n      <Tab eventKey={2} title=\"Reference\">\n        <ResistorTable />\n      </Tab>\n    </TabsView>\n  );\n}\n\nexport default Resistors;\n"],"sourceRoot":""}